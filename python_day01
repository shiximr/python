

gitlab服务器
1、生成一台虚拟机，内存4G以上
node1 -> 192.168.4.1 安装docker，导入gitlab镜像
2、启动docker
[root@node1 docker_pkgs]# yum install -y *rpm
[root@node1 docker_pkgs]# systemctl start docker
[root@node1 docker_pkgs]# systemctl enable docker
3、导入镜像
[root@node1 docker]# docker load < images/gitlab_zh.tar
4、因为容器也需要用到22端口，所以把虚拟机的端口改为2022
[root@node1 docker]# vim /etc/ssh/sshd_config
Port 2022
[root@node1 docker]# systemctl restart sshd
5、启动gitlab容器
[root@node1 ~]# docker run -d -h gitlab --name gitlab -p 443:443
-p 80:80 -p 22:22 --restart always -v /srv/gitlab/config:/etc/gitlab
-v /srv/gitlab/logs:/var/log/gitlab
-v /srv/gitlab/data:/var/opt/gitlab gitlab_zh:latest
6、访问http://192.168.4.1/。gitlab启动需要一段时间，开始的时候显示无法访问，
过一段时间访问，出现内部错误，多等一会就可以了。
# docker ps  看到状态是(healthy)时，就可以正常访问了
7、第一次访问需要设置密码，密码必须8位以上，要复杂一些。用户名为root
8、gitlab服务器上的重要组成部分：
（1）群组group：对应一个个团队
（2）项目project：每个group都会编写多个软件项目，每个软件项目创建一个project
（3）成员member：对应一个个的用户
新建用户的时候不能设置密码。但是创建完成后，编辑用户可以为其设置密码。
9、设置新建的用户是项目的主程序员
10、上传软件项目到gitlab
[root@node2 ~]# cd devops/
[root@node2 devops]# git remote rename origin old-origin
  出现以下错误，忽略即可
error: 不能重命名配置小节 'remote.origin' 到 'remote.old-origin'
[root@node2 devops]# git remote add origin http://192.168.4.1/devops/core_py.git
[root@node2 devops]# git push -u origin --all
[root@node2 devops]# git push -u origin --tags

11、使用ssh免密的方式上传
(1) 本地生成密钥对
[root@node2 devops]# ssh-keygen -t rsa -C "zzg@tedu.cn" -b 4096
(2) 拷贝~/.ssh/id_rsa.pub，粘贴到gitlab用户的ssh密钥中
(3) 将第10步中的http方式改为ssh
[root@node2 devops]# git remote remove origin
[root@node2 devops]# git remote add origin git@192.168.4.1:devops/core_py.git
(4) 编写代码，上传
[root@node2 devops]# echo "demo project" > README.md
[root@node2 devops]# git add .
[root@node2 devops]# git commit -m "add readme"
[root@node2 devops]# git push
12、如果在上传的时候，出现Permission Denied。解决办法：
[root@node2 devops]# ssh-agent
把ssh-agent输出的环境变量直接运行一下，然后执行下面命令
[root@node2 devops]# ssh-add
如果出现如下报错：
Permissions 0644 for '/root/.ssh/id_rsa' are too open.
需要把私钥的权限改为0600 


python 语法
print('Hello World')

if 3>0:
    print('yes')
    print('ok')

if 13>10:print('abc') #无错误，但是不推荐这样写

pycharm按键快捷方式：
shift+tab  语句对齐
ctrl+/  快速注释和取消注释

标准输出
print('Hello World')
print('Hello', 'World')
print('Hello', 'World', 10, sep='***') #sep 定义各项之间的分隔符
print('Hello'+'World') #字符拼接

标准输入
number = input('number:') #input 读入的数据全部都是字符类型    
print(number)                                     
print(int(number) + 10) #int(number) 将数字转成数字      
print(number + '10')                              
print(number + str(10)) #str(10) 把数字转成字符          
